name: Test cypress end to end and backend üë©‚Äçüíª

on: 
  push:
    branches:
      - main
      - develop
      - qa
  workflow_dispatch:

jobs:
  frontend_tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Install Chrome (Windows only) 
        if: runner.os == 'Windows'
        run: |
          Invoke-WebRequest -Uri https://dl.google.com/chrome/install/latest/chrome_installer.exe -OutFile chrome_installer.exe
          Start-Process -FilePath chrome_installer.exe -ArgumentList '/silent', '/install' -NoNewWindow -Wait

      - name: Run end to end Tests
        run: npm run allure:run:front
        continue-on-error: true  # Permite que el flujo contin√∫e aunque falle

        #en Windows no funciona el plugin de SLACK
      # - name: Slack Notification - Success
      #   if: success()
      #   uses: rtCamp/action-slack-notify@v2.1.2
      #   env:
      #     SLACK_CHANNEL: automation-cypress-github
      #     SLACK_COLOR: '#00ff15'
      #     SLACK_ICON: https://forkast.news/wp-content/uploads/2022/03/NFT-Avatar.png
      #     SLACK_MESSAGE: 'Result test END to END on ${{ matrix.os }}'
      #     SLACK_TITLE: ‚úÖ STATUS TEST
      #     SLACK_USERNAME: üëæ David-Bot
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      # - name: Slack Notification - Failure
      #   if: failure()
      #   uses: rtCamp/action-slack-notify@v2.1.2
      #   env:
      #     SLACK_CHANNEL: automation-cypress-github
      #     SLACK_COLOR: '#ff1100'
      #     SLACK_ICON: https://forkast.news/wp-content/uploads/2022/03/NFT-Avatar.png
      #     SLACK_MESSAGE: 'Failed tests END to END on ${{ matrix.os }}, notify QA'
      #     SLACK_TITLE: üö® STATUS TEST
      #     SLACK_USERNAME: David-Bot
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      
  endpoint_tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Install wait-on globally
        run: npm install -g wait-on

      - name: Start JSON server
        run: npm run run:server &

      - name: Wait for the application json server to be ready
        run: npx wait-on http://localhost:3000 

      - name: Run Endpoint Tests
        run: npm run allure:run:back
        continue-on-error: true  # Permite que el flujo contin√∫e aunque falle

      - name: Slack Notification - Success
        if: success()
        uses: rtCamp/action-slack-notify@v2.1.2
        env:
          SLACK_CHANNEL: automation-cypress-github
          SLACK_COLOR: '#00ff15'
          SLACK_ICON: https://forkast.news/wp-content/uploads/2022/03/NFT-Avatar.png
          SLACK_MESSAGE: 'Result test APIs, on ubuntu-latest üêß'
          SLACK_TITLE: ‚úÖ STATUS TEST
          SLACK_USERNAME: üëæ David-Bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Slack Notification - Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2.1.2
        env:
          SLACK_CHANNEL: automation-cypress-github
          SLACK_COLOR: '#ff1100'
          SLACK_ICON: https://forkast.news/wp-content/uploads/2022/03/NFT-Avatar.png
          SLACK_MESSAGE: 'Failed tests APIs, on ubuntu-latest üêß, notify QA'
          SLACK_TITLE: üö® STATUS TEST
          SLACK_USERNAME: David-Bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

  generate_allure_report:
    runs-on: ubuntu-latest
    needs: [frontend_tests, endpoint_tests] # Espera que las pruebas se completen

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm install

      - name: Install Allure Commandline
        run: npm install -g allure-commandline

      - name: Generate Allure Report
        run: npm run allure:report

      # Guardar los resultados de Allure como artefacto
      - name: Store Allure Results
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: allure-report
